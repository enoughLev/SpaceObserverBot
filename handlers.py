from aiogram import types
from buttons_worker import make_start_keyboard, build_favorites_list_kb, FavCallbackFactory, build_favorite_object_kb
from nasa_api import get_random_space_object
from scraper import get_iss_status, get_iss_crew
from favorites_actions import get_favorites, delete_favorite_by_index, add_to_favorites, delete_all_favorites
from logger import log_dialog
from translator import translate_to_russian

user_last_data = {}

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫

async def unknown_command_handler(event: types.Message):
    text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    await event.answer(text)
    log_dialog(event.from_user.id, f'User: {event.text}\nBot: {text}')


async def start_handler(event: types.Message):
    try:
        with open("start.md", "r", encoding="utf-8") as f:
            start_text = f.read()
    except FileNotFoundError:
        start_text = "–§–∞–π–ª start.md –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        start_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ start.md: {e}"

    kb = make_start_keyboard()
    await event.answer(start_text, reply_markup=kb)
    log_dialog(event.from_user.id, f'User: {event.text}\nBot: {start_text}')


async def help_handler(event: types.Message):
    try:
        with open("help.md", "r", encoding="utf-8") as f:
            help_text = f.read()
    except FileNotFoundError:
        help_text = "–§–∞–π–ª help.md –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        help_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ help.md: {e}"

    kb = make_start_keyboard()
    await event.answer(help_text, reply_markup=kb)
    log_dialog(event.from_user.id, f'User: {event.text}\nBot: {help_text}')


async def random_handler(event: types.Message):
    data = get_random_space_object()
    user_last_data[event.from_user.id] = data
    if data:
        text = f"{translate_to_russian(data['title'])}\n\n{translate_to_russian(data['explanation'])}\n\n{data['url']}"
    else:
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å NASA API."
    kb = make_start_keyboard()
    await event.answer(text, reply_markup=kb)
    log_dialog(event.from_user.id, f'User: {event.text}\nBot: {text}')


async def iss_status_handler(event: types.Message):
    days = get_iss_status()
    text = f"–ú–ö–° —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ {days} –¥–Ω–µ–π."
    kb = make_start_keyboard()
    await event.answer(text, reply_markup=kb)
    log_dialog(event.from_user.id, f'User: {event.text}\nBot: {text}')


async def crew_handler(event: types.Message):
    crew = get_iss_crew()

    if not crew:
        await event.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∏–ø–∞–∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    for member in crew:
        text = f"üë®‚ÄçüöÄ {member['name']}\n–ö–æ–º–∞–Ω–¥–∞: {member['team']}"
        await event.answer(text)
        log_dialog(event.from_user.id, f'User: {event.text}\nBot: {text}')


async def favorite_add_handler(event: types.Message):
    user_id = event.from_user.id
    item = user_last_data.get(user_id)
    if item is None:
        text = "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç"
        kb = make_start_keyboard()
        await event.answer(text, reply_markup=kb)
        return

    favorites = get_favorites(user_id)
    exists = any(fav.get('title') == item.get('title') for fav in favorites)
    if exists:
        text = "–≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º."
    else:
        add_to_favorites(user_id, item)
        text = "–û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."
    kb = make_start_keyboard()
    await event.answer(text, reply_markup=kb)

    log_dialog(user_id, f'User: {event.text}\nBot: {text}')


async def favorites_list_handler(event: types.Message):
    user_id = event.from_user.id
    favorites = get_favorites(user_id)
    if not favorites:
        await event.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.", reply_markup=make_start_keyboard())
        return
    text = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    kb = build_favorites_list_kb(favorites)
    await event.answer(text, reply_markup=kb)

    log_dialog(event.from_user.id, f'User: {event.text}\nBot: {text}')


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

async def favorites_callback_handler(call: types.CallbackQuery, callback_data: FavCallbackFactory):
    user_id = call.from_user.id
    action = callback_data.action
    index = callback_data.index
    favorites = get_favorites(user_id)

    if action == "list":
        if not favorites:
            await call.message.edit_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.")
            log_dialog(user_id, "User requested list: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            await call.answer()
            return
        text = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        kb = build_favorites_list_kb(favorites)
        await call.message.edit_text(text, reply_markup=kb)
        log_dialog(user_id, "User requested list: —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω")
        await call.answer()

    elif action == "select":
        if index < 0 or index >= len(favorites):
            await call.answer("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            log_dialog(user_id, f"User tried to select invalid index {index}")
            return
        obj = favorites[index]
        title_ru = translate_to_russian(obj.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        explanation_ru = translate_to_russian(obj.get('explanation', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'))
        text = f"{title_ru}\n\n{explanation_ru}\n\n"
        if 'url' in obj:
            text += f"{obj['url']}"
        kb = build_favorite_object_kb(index)
        await call.message.edit_text(text, reply_markup=kb)
        await call.answer()

        log_dialog(user_id, f'User selected index {index}:\nBot response:\n{text}')

    elif action == "delete":
        if index < 0 or index >= len(favorites):
            await call.answer("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            log_dialog(user_id, f"User tried to delete invalid index {index}")
            return
        success = delete_favorite_by_index(user_id, index)
        if success:
            favorites = get_favorites(user_id)
            if not favorites:
                await call.message.edit_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.")
                log_dialog(user_id, f"User deleted index {index}, —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            else:
                text = "–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
                kb = build_favorites_list_kb(favorites)
                await call.message.edit_text(text, reply_markup=kb)
                log_dialog(user_id, f"User deleted index {index}, —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")
        else:
            await call.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞.")
            log_dialog(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {index}")
        await call.answer()

    elif action == "delete_all":
        delete_all_favorites(user_id)
        await call.message.edit_text("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        log_dialog(user_id, "User deleted all favorites")
        await call.answer()
